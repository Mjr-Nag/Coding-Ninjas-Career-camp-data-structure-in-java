*************************************************************************************************************************************************************************
----------------------------------------------------------Array Intersection-------------------------Array Intersection-------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************************************************************
import java.util.*;
public class Solution {

	public static void intersection(int[] arr1, int[] arr2) {
	    //Your code goes here
		Arrays.sort(arr1);
		Arrays.sort(arr2);
		int i = 0 ;
		int j = 0;
		while(i<arr1.length && j<arr2.length){
			if (arr1[i] == arr2[j]){
				System.out.print(arr1[i]+  " ");
				i++;
				j++;
			}
			else if (arr1[i]<arr2[j]){
				i++;
			}
			else{
				j++;
			}
		}
	}

}

************************************************************************************************************************************************************************
--------------------------------------------------------Array Equilibrium Index-------------------------Array Equilibrium Index-----------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*************************************************************************************************************************************************************************
public class Solution {

	public static int arrayEquilibriumIndex(int[] arr){  
		//Your code goes here
	
				int  total = 0;
				int leftSum = 0;
				for(int i = 0; i<arr.length; i++)
				{
					total+=arr[i];
				}
				for(int i=0; i<arr.length; i++)
				{
					if(leftSum==total-leftSum-arr[i])
					return i;
					leftSum+=arr[i];

				}
				return -1;
	}
}

********************************************************************************************************************************************************************
-------------------------------------------------Assignment-----Find the Unique Element---------------------Find the Unique Element-----------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
*********************************************************************************************************************************************************************
public class Solution {

	public static int findUnique(int[] arr) {
		//Your code goes here
		int ans = 0;
		for (int i =0; i<arr.length; i++){
			ans = ans^arr[i];

		}
		return ans;
	}
}
********************************************************************************************************************************************************************
----------------------------------------Duplicate in array  Assignment-------------------------------------------Duplicate in array----------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
********************************************************************************************************************************************************************
public class Solution {
	public static int findDuplicate(int[] arr) {
		
        int ans = 0;
        for(int i = 0; i<arr.length; i++)
        {
            ans = ans^arr[i];
        }
        for(int i = 1; i<arr.length -1; i++){
            ans = ans^i;
        }
        return ans;
    }
}
********************************************************************************************************************************************************************
-----------------------------------------------------Pair sum in array----------------------Pair sum in array------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
********************************************************************************************************************************************************************
public class Solution {	

	public static int pairSum(int[] arr, int num) {
		int count=0;
        for (int i = 0; i < arr.length; i++) 
        {

            for (int j = i+1; j < arr.length; j++) 
            {
                if (arr[i] + arr[j]==num){
                    count++;
                }
            }
        }
        return count;
    }
}
*********************************************************************************************************************************************************************
---------------------------------------------Triplet sum------------------------------Triplet sum--------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
********************************************************************************************************************************************************************
import java.util.*;

public class Solution {	
	
        public static int pairSum(int[] arr, int startIndex, int endIndex, int num) {
		int numPair = 0;

		while (startIndex < endIndex) {

			if (arr[startIndex] + arr[endIndex] < num) {
				startIndex++;
			} else if (arr[startIndex] + arr[endIndex] > num) {
				endIndex--;
			} else {
				int elementAtStart = arr[startIndex];
				int elementAtEnd = arr[endIndex];

				if (elementAtStart == elementAtEnd) {
					int totalElementFromStartToEnd = (endIndex - startIndex) + 1;
					numPair += (totalElementFromStartToEnd * (totalElementFromStartToEnd - 1) / 2);

					return numPair;
				}
				int tempStartIndex = startIndex + 1;
				int tempEndIndex = endIndex - 1;

				while (tempStartIndex <= tempEndIndex && arr[tempStartIndex] == elementAtStart) {
					tempStartIndex++;
				}
				while (tempEndIndex >= tempStartIndex && arr[tempEndIndex] == elementAtEnd) {
					tempEndIndex--;
				}

				int totalElementFromStart = tempStartIndex - startIndex;
				int totalElementFromEnd = (endIndex - tempEndIndex);

				numPair += (totalElementFromStart * totalElementFromEnd);

				startIndex = tempStartIndex;
				endIndex = tempEndIndex;
			}
		}
		return numPair;
	}

	public static long tripletSum(int[] arr, int num) {
		Arrays.sort(arr);
        int n = arr.length;

        long numTriplets = 0;

        for (int i = 0; i < n; i++) {
            int pairSumFor = num - arr[i];
            long numPairs = pairSum(arr, (i + 1), (n - 1), pairSumFor);

            numTriplets += numPairs;
        }
        return numTriplets;
	}
}
******************************************************************************************************************************************************************
------------------------------------------Rotate array----------------------------Rotate array--------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
*******************************************************************************************************************************************************************

public class Solution {  

    public static void rotate(int[] arr, int d) {
    	//Your code goes here
        int len = arr.length;
        int [] arr1 = new int [len];
        int k = 0;
        for(int i = 0; i<len; i++){
            arr1[k] = arr[(i+d)%len];
            k++;
        }
         for(int i = 0; i<len; i++){
             arr[i] = arr1[i];
         }
    }

}
