+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
________________________________Stack Using LL_______________________________Stack Using LL______________Stack Using LL______________________________________________
_____________________________________________________________________________________________________________________________________________________________________
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/*
    Following is the structure of the node class for a Singly Linked List

    class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }

    }

*/
public class Stack {
    //Define the data members
    private Node head;
    private int size;


    public Stack() {
        //Implement the Constructor
        head=null;
        size=0;
    }



    /*----------------- Public Functions of Stack -----------------*/


    public int getSize() { 
        //Implement the getSize() function
        return size;
    }

    public boolean isEmpty() {
        //Implement the isEmpty() function
        return size==0;
    }

    public void push(int element) {
        //Implement the push(element) function
        Node newNode=new Node(element);
        if (head==null)
        {
            head=newNode;
        }
        else
        {
           newNode.next=head;
            head=newNode;
        }
        size=size+1;
    }

    public int pop() {
        //Implement the pop() function
        
        if (head==null)
        {
            size=0;
            return -1;
        }
        else
        {
            size=size-1;
            int topEle=head.data;
            head=head.next;
            return topEle;
        }
        
        
    }

    public int top() {
        //Implement the top() function
        if (head==null)
        {
            return -1;
        }
        else
        {
            return head.data;
        }
        
    }
}
=======================================================================================================================================================================
____________________________Brackets Balanced______________________________Brackets Balanced______________________Brackets Balanced____________________________________
_______________________________________________________________________________________________________________________________________________________________________
=======================================================================================================================================================================

import java.util.*;
public class Solution {


    public static boolean isBalanced(String expression) {
        //Your code goes here
        Stack<Character> stack=new Stack<Character>();
        for (int j=0;j<expression.length();j++)
        {
            char i=expression.charAt(j);
            if (i=='[' || i=='{' || i=='(')
            {
                stack.push(i);
            }
            else if(i==']' || i=='}' || i==')')
            {
                if (stack.isEmpty())
                    return false;
                
                else
                {
                    if (i==']')
                    {
                        if (stack.peek()!='[')
                            return false;
                        else
                            stack.pop();
                    }
                    
                    else if (i=='}')
                    {
                        if (stack.peek()!='{')
                            return false;
                        else
                            stack.pop();
                    }
                    
                    else if (i==')')
                    {
                        if (stack.peek()!='(')
                            return false;
                        else
                            stack.pop();
                    }
                }
            }
            
        }
        return stack.isEmpty();
        
    }
}
======================================================================================================================================================================
___________________________________Reverse Stack______________________________Reverse Stack_______________Reverse Stack_______________________________________________
_______________________________________________________________________________________________________________________________________________________________________
======================================================================================================================================================================
import java.util.*;
public class Solution {

	public static void reverseStack(Stack<Integer> input, Stack<Integer> empty) {
		//Your code goes here
        if (input.size()==0 || input.size()==1)
        {
            return;
        }
        
        int top=input.pop();
        reverseStack(input,empty);
        
        while(!input.isEmpty())
        {
            empty.push(input.pop());
        }
        input.push(top);
        
        while(!empty.isEmpty())
        {
            input.push(empty.pop());
        }
	}
}

=======================================================================================================================================================================
______________________________Assignment-------Check redundant brackets-----Assignment------------------Check redundant brackets______________________________________
_______________________________________________________________________________________________________________________________________________________________________
=======================================================================================================================================================================
import java.util.*;
public class Solution {

	public static boolean checkRedundantBrackets(String expression) {
		//Your code goes here
        Stack<Character> stack=new Stack<Character>();
        int count=0;
        for(int i=0;i<expression.length();i++)
        {
            char c=expression.charAt(i);
            //System.out.print(c);
            
            if (c==')')
            {
                //System.out.println();
                while(!stack.isEmpty() && stack.peek()!='(')
                {
                    count=count+1;
                    stack.pop();
                    //System.out.print(stack.pop());
                }
                //System.out.println();
                //System.out.println(count);
                if (count==0 || count==1)
                {
                    return true;
                }
                stack.pop();
                count=0;
                
            }
            else
            {
                stack.push(c);
            }
        }
        return false;
	}
}

=======================================================================================================================================================================
-------------------------------------Stock Span----------------------------------Stock Span-----------------------------------Stock Span-------------------------------
______________________________________________________________________________________________________________________________________________________________________
======================================================================================================================================================================
import java.util.Stack;
public class Solution {

	public static int[] stockSpan(int[] price) {
		//Your code goes here
        int[] span=new int[price.length];
        Stack<Integer> stack=new Stack<Integer>();
        span[0]=1;
        stack.push(0);
        
        for (int i=1;i<price.length;i++)
        {
            while(!stack.isEmpty() && price[stack.peek()]<price[i])
            {
                stack.pop();
            }
            //System.out.println(stack.size());
            
            if (stack.isEmpty())
            {
                span[i]=i+1;
            }
            else
            {
                
                span[i]=i-stack.peek();
            }
            stack.push(i);
            //System.out.println("New top: "+stack.peek());
            //System.out.println();
        }
        return span;
        
	}

}

======================================================================================================================================================================
____________________________Minimum bracket Reversal_______________Minimum bracket Reversal______________________Minimum bracket Reversal_____________________________
_____________________________________________________________________________________________________________________________________________________________________
=====================================================================================================================================================================
import java.util.*;
public class Solution {

	public static int countBracketReversals(String input) {
		//Your code goes here
        if (input.length()%2!=0)
        {
            return -1;
        }
        Stack<Character> stack=new Stack<Character>();
        int count=0;
        for (int i=0;i<input.length();i++)
        {
            char c=input.charAt(i);
            if (c=='{')
            {
                stack.push(c);
            }
            else
            {
                if (stack.isEmpty())
                {
                    stack.push(c);
                }
                else if (stack.peek()=='}')
                {
                    stack.push(c);
                }
                else if (stack.peek()=='{')
                {
                    stack.pop();
                }
            }
        }
        
        while(!stack.isEmpty())
        {
            char c1=stack.pop();
            char c2=stack.pop();
            
            if (c1==c2)
            {
                count=count+1;
            }
            else
            {
                count=count+2;
            }
        }
        return count;
        
	}

}
