*********************************************************************************************************************************************************************
--------------------------------------Print 2D Array---------------------------------------------Print 2D Array------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
**********************************************************************************************************************************************************************
public class solution {

	public static void print2DArray(int input[][]) {
		// Write your code here
		for (int i = 0; i < input.length; i++) {
			for (int j = i; j < input.length; j++) {
				for (int k = 0; k < input[0].length; k++) {
					System.out.print(input[i][k] + " ");
				}
				System.out.println();
			}
		}

	}
}
***********************************************************************************************************************************************************************
-----------------------------------Maximum Profit on App---------------------------------Maximum Profit on App--------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
***********************************************************************************************************************************************************************
import java.util.*;

public class solution {

	public static int maximumProfit(int budget[]) {
		// Write your code here
		Arrays.sort(budget);
		
		int ans = Integer.MIN_VALUE;
		int n = budget.length;
		
		for (int i = 0; i < n; i++) {
			ans = Math.max(ans, budget[i] * (n - i));
		}
		return ans;

	}

}
********************************************************************************************************************************************************************
---------------------------------Minimum Count-----------------------------------------Minimum Count----------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
********************************************************************************************************************************************************************

public class Solution {
	
	public static int minCount(int n){
		/* Your class should be named Solution
	 	 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
		 * Taking input and printing output is handled automatically.
		*/
		
		int dp[] = new int[n + 1];
		dp[0] = 0;
		for (int i = 1; i <= n; i++)
			dp[i] = i;
		for (int i = (int) Math.sqrt(n); i <= n; i++) {
			for (int j = 1; j <= (int) Math.sqrt(i); j++) {
				dp[i] = Math.min(dp[i], 1 + dp[i - (j * j)]);
			}
		}
		return (dp[n]);
	}
}
********************************************************************************************************************************************************************
--------------------------------------------Split Array---------------------------------Split Array------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
*********************************************************************************************************************************************************************
public class solution {
	private static boolean splitArray(int input[], int si, int lsum, int rsum) {
		if (input.length == si) {
			return lsum == rsum;
		}

		if (input[si] % 3 == 0) {
			lsum += input[si];
		} else if (input[si] % 5 == 0) {
			rsum += input[si];
		} else {
			return splitArray(input, si + 1, lsum + input[si], rsum)
					|| splitArray(input, si + 1, lsum, rsum + input[si]);
		}

		return splitArray(input, si + 1, lsum, rsum);
	}

	public static boolean splitArray(int input[]) {
		/*
		 * Your class should be named solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
		 * Taking input and printing output is handled automatically.
		 */
		return splitArray(input, 0, 0, 0);

	}

}
