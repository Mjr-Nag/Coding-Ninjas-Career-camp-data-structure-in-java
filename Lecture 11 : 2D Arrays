***********************************************************************************************************************************************************************
--------------------------------------------------------------Row Wise Sum--------------Row Wise Sum------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
***********************************************************************************************************************************************************************
public class Solution
 {

	public static void rowWiseSum(int[][] mat)
	 {
		// Your code goes here
		for (int i = 0; i < mat.length; i++)
		 {
			int sum = 0;
			for (int j = 0; j < mat[0].length; j++)
			 {
				sum += mat[i][j];
			}
			System.out.print(sum + " ");
		}
	}
}
	
***********************************************************************************************************************************************************************
-------------------------------------------------Largest Row or Column---------------------------Largest Row or Column-------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
***********************************************************************************************************************************************************************
public class Solution
 {
	 	public static void findLargest(int mat[][])
	{
				int Lrow = Integer.MIN_VALUE;
				int Lcol = Integer.MIN_VALUE;
				int C_index = 0;
				int R_index = 0;

				if (mat.length > 0) 
				{
					for (int i = 0; i < mat.length; i++) 
					{
						int sum = 0;
						for (int ele : mat[i])
							sum += ele;
						if (Lrow < sum)
						 {
							Lrow = sum;
							R_index = i;
						}
					}

					for (int i = 0; i < mat[0].length; i++)
					 {
						int sum = 0;
						for (int j = 0; j < mat.length; j++)
						 {
							sum += mat[j][i];
						}
						if (Lcol < sum)
						 {
							Lcol = sum;
							C_index = i;
						}
					}
				}
				if (Lrow >= Lcol)
					System.out.println("row " + R_index + " " + Lrow);
				else
					System.out.println("column " + C_index + " " + Lcol);
	}

}
*********************************************************************************************************************************************************************
---------------------------------------------Assignment ----------------------------Total Sum on the Boundaries and Diagonals----------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
*********************************************************************************************************************************************************************
public class Solution 
{
public static void totalSum(int[][] mat)
 {
		//Your code goes here
		 int horizontal=mat.length-1;
        if (horizontal==-1)
        {
            System.out.println(0);
            System.exit(0);
        }
         int vertically=mat[0].length-1;
         int sum=0;
         for (int i = 0; i < mat.length; i++)
        {
            for (int j = 0; j < mat[i].length; j++)
            {
                if (i==0 | j==0 | i==horizontal | j==vertically |i==j | j==horizontal-i)
                {
                    sum+=mat[i][j];
                }
            }
        }
        System.out.print(sum);
    }

}
**********************************************************************************************************************************************************************
------------------------------------------------------Print Like a Wave-------------------------------Print Like a Wave------------------------------------------------
*********************************************************************************************************************************************************************
public class Solution
 {
	public static void wavePrint(int mat[][])
	{
				    if (mat.length == 0)
					System.exit(0);
				    int p = mat[0].length - 1;
				    for (int j = 0; j < mat[0].length; j++)
				 {
					    for (int i = 0; i < mat.length; i++) 
						{
						System.out.print(mat[i][j] + " ");
					    }
					      j++;
					      if (j == mat[0].length)
					    	System.exit(0);
				        	for (int i = mat.length - 1; i >= 0; i--)
							 {
						       System.out.print(mat[i][j] + " ");
				        	}
				  }
	}

}

*******************************************************************************************************************************************************************
-----------------------------------------Print Spiral---------------------------------------------Print Spiral------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
********************************************************************************************************************************************************************
public class Solution {

	public static void spiralPrint(int mat[][]) {
		// Your code goes here
		if (mat.length == 0) {
			return;
		}
		int minr = 0;
		int maxr = mat.length - 1;
		int minc = 0;
		int maxc = mat[0].length - 1;
		int cnt = 0;
		int tt = (maxc + 1) * (maxr + 1);
		while (cnt < tt) {
			int i = minr;
			int j = minc;
			int m = maxr;
			int n = maxc;
			while (j <= maxc && cnt < tt) {
				System.out.print(mat[minr][j] + " ");
				j++;
				cnt++;
			}
			i++;
			while (i <= maxr && cnt < tt) {
				System.out.print(mat[i][maxc] + " ");
				i++;
				cnt++;
			}
			n--;

			while (n >= minc && cnt < tt) {
				System.out.print(mat[maxr][n] + " ");
				n--;
				cnt++;
			}
			m--;
			while (m > minr && cnt < tt) {
				System.out.print(mat[m][minc] + " ");
				m--;
				cnt++;
			}
			minr++;
			minc++;
			maxr--;
			maxc--;
		}
	}
}
