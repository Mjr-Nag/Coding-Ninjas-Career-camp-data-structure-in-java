**********************************************************************************************************************************************************************
-----------------------------------------------Find Leaders in array-------------------------------------Find Leaders in array---------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
**********************************************************************************************************************************************************************
public class Solution {

	public static void leaders(int[] arr) {
		
		  int size =  arr.length;
		  int max_from_right =  arr[size-1];
   
       
        System.out.print(max_from_right + " ");
       
        for (int i = size-2; i >= 0; i--)
        {
            if (max_from_right <= arr[i])
            {           
            max_from_right = arr[i];
            System.out.print(max_from_right + " ");
            }
        }    
		
	}
	
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------Minimum Length Word---------------------------------------------Minimum Length Word--------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

public class Solution {
	
	public static String minLengthWord(String input){
		
		// Write your code here
		String ans  = "";
		String arr [] = input.split(" ");
		int min = Integer.MAX_VALUE;
		for(int i = 0; i<arr.length; i++){
			if (arr[i].length()<min){
				ans = arr[i];
				min = arr[i].length();
			}
		}
		return ans;

	}
}
*********************************************************************************************************************************************************************
-------------------------------------------------Maximise the sum------------------------------Maximise the sum------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
**********************************************************************************************************************************************************************
public class Solution {

	public static long maximumSumPath(int[] arr1, int[] arr2) {
		
		long n = arr1.length;
		long m = arr2.length;
		int i = 0, j = 0;

		long currSumArr1 = 0, currSumArr2 = 0, maximumSum = 0;

		// Iterate while i<n and j<m
		while (i < n && j < m) {
		
			if (arr1[i] < arr2[j]) {

				currSumArr1 += arr1[i];
				i++;
			}

		
			else if (arr1[i] > arr2[j]) {
				currSumArr2 += arr2[j];
				j++;
			}

			// Otherwise, update maximumSum
			else {
				maximumSum += Math.max(currSumArr1, currSumArr2);
				maximumSum += arr1[i];
				currSumArr1 = 0;
				currSumArr2 = 0;
				i++;
				j++;
			}
		}

		while (i < n) {
			currSumArr1 += arr1[i];
			i++;
		}

		while (j < m) {
			currSumArr2 += arr2[j];
			j++;
		}

		maximumSum += Math.max(currSumArr1, currSumArr2);

		return maximumSum;
		
	}
}
