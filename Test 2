*************************************************************************************************************************************************************************
------------------------------------------------------------------Number Star Pattern-----------------------------------------------------------------------------------
************************************************************************************************************************************************************************
import java.util.*;
public class Solution
 {
	public static void main(String[] args)
	 {
          Scanner sc = new Scanner(System.in);
		   int n = sc.nextInt();
		    for(int i = 1; i<=n; i++)
			{
			     for(int j = 1; j<=n ; j++)
				 {
				    if (j >n-i+1)
					{
					System.out.print("*");
				    }
				      else
					{
					  System.out.print(j);
				    }

			}
			         for(int j = n; j>=1 ; j--)
					 {
				       if (j >n-i+1){
					   System.out.print("*");
				    }
				      else
					  {
					     System.out.print(j);
				      }				
			}
			    System.out.println();

		}

	}
}

**********************************************************************************************************************************************************************
----------------------------------------------------------------Probability------------------------------------------------------------------------------------------
***********************************************************************************************************************************************************************

public class Solution
 {
        public static double factorial(double num)
         {
            int fact = 1;
            for (int i = 2; i <= num; i++)
             {
                fact *= i;
             }
                return fact;
             }

                public static int probability(int n, int x) 
                {
                   double Ns, Ne1, Ne2;
                    int Pe;
                    Ns = factorial(8.0) / (factorial(n * 1.0) * factorial(8.0 - n));
                    Ne1 = factorial(4.0) / (factorial(x * 1.0) * factorial(4.0 - x));
                    Ne2 = factorial(4.0) / (factorial(((n - x) * 1.0)) * factorial((4.0 - (n - x))));
                    Pe = (int) (((Ne1 * Ne2) / Ns) * 100);
                    return Pe;

    }

}

*******************************************************************************************************************************************************************
-----------------------------------------------------------------------Maximum number-----------------------------------------------------------------------------
********************************************************************************************************************************************************************
public class Solution
 {
     public static int max_number(int n) 
     { 
          int k = 1;
          for (int j = 0; j < k; j++)
           {
              int ans = 0;
              int i = 1;
              while (n / i > 0) 
              {
                  int temp = (n / (i * 10))
                        * i
                        + (n % i);
                        i *= 10;
                        ans = Math.max(ans, temp);
              }
                 n = ans;
        }

        return n;

    }

}
